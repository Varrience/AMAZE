var p5Inst = new p5(null, 'sketch');

window.preload = function () {
  initMobileControls(p5Inst);

  p5Inst._predefinedSpriteAnimations = {};
  p5Inst._pauseSpriteAnimationsByDefault = false;
  var animationListJSON = {"orderedKeys":[],"propsByKey":{}};
  var orderedKeys = animationListJSON.orderedKeys;
  var allAnimationsSingleFrame = false;
  orderedKeys.forEach(function (key) {
    var props = animationListJSON.propsByKey[key];
    var frameCount = allAnimationsSingleFrame ? 1 : props.frameCount;
    var image = loadImage(props.rootRelativePath, function () {
      var spriteSheet = loadSpriteSheet(
          image,
          props.frameSize.x,
          props.frameSize.y,
          frameCount
      );
      p5Inst._predefinedSpriteAnimations[props.name] = loadAnimation(spriteSheet);
      p5Inst._predefinedSpriteAnimations[props.name].looping = props.looping;
      p5Inst._predefinedSpriteAnimations[props.name].frameDelay = props.frameDelay;
    });
  });

  function wrappedExportedCode(stage) {
    if (stage === 'preload') {
      if (setup !== window.setup) {
        window.setup = setup;
      } else {
        return;
      }
    }
// -----

//@ALL RIGHTS RESERVED VARRIENCE PRESENTS...
/*
          _____                            _____                    _____                    _____                    _____          
         /\    \                          /\    \                  /\    \                  /\    \                  /\    \         
        /::\    \                        /::\____\                /::\    \                /::\    \                /::\    \        
       /::::\    \                      /::::|   |               /::::\    \               \:::\    \              /::::\    \       
      /::::::\    \                    /:::::|   |              /::::::\    \               \:::\    \            /::::::\    \      
     /:::/\:::\    \                  /::::::|   |             /:::/\:::\    \               \:::\    \          /:::/\:::\    \     
    /:::/__\:::\    \                /:::/|::|   |            /:::/__\:::\    \               \:::\    \        /:::/__\:::\    \    
   /::::\   \:::\    \              /:::/ |::|   |           /::::\   \:::\    \               \:::\    \      /::::\   \:::\    \   
  /::::::\   \:::\    \            /:::/  |::|___|______    /::::::\   \:::\    \               \:::\    \    /::::::\   \:::\    \  
 /:::/\:::\   \:::\    \          /:::/   |::::::::\    \  /:::/\:::\   \:::\    \               \:::\    \  /:::/\:::\   \:::\    \ 
/:::/  \:::\   \:::\____\        /:::/    |:::::::::\____\/:::/  \:::\   \:::\____\_______________\:::\____\/:::/__\:::\   \:::\____\
\::/    \:::\  /:::/    /        \::/    / ~~~~~/:::/    /\::/    \:::\  /:::/    /\::::::::::::::::::/    /\:::\   \:::\   \::/    /
 \/____/ \:::\/:::/    /          \/____/      /:::/    /  \/____/ \:::\/:::/    /  \::::::::::::::::/____/  \:::\   \:::\   \/____/ 
          \::::::/    /                       /:::/    /            \::::::/    /    \:::\~~~~\~~~~~~         \:::\   \:::\    \     
           \::::/    /                       /:::/    /              \::::/    /      \:::\    \               \:::\   \:::\____\    
           /:::/    /                       /:::/    /               /:::/    /        \:::\    \               \:::\   \::/    /    
          /:::/    /                       /:::/    /               /:::/    /          \:::\    \               \:::\   \/____/     
         /:::/    /                       /:::/    /               /:::/    /            \:::\    \               \:::\    \         
        /:::/    /                       /:::/    /               /:::/    /              \:::\____\               \:::\____\        
        \::/    /                        \::/    /                \::/    /                \::/    /                \::/    /        
         \/____/                          \/____/                  \/____/                  \/____/                  \/____/         
                                                                                                                                     
    \\\\\\\\\\\\\\\\\\V0.0 CORE NOTES//////////////////
    - LEVELS GENERATED FROM AN ARRAY MAP          (DONE)
    - PLAYER CAN BE LOCATED AT DIFFERENT SPOTS    (DONE)
    - KEEP TRACK OF THE CURRENT LEVEL             (DONE)
    - FORMAT ARRAY INTO TILES ON GRID             (DONE)
    - TEST FOR SOLID CELLS TO STOP MOVEMENT       (DONE)
    - ALLOCATE SPECIFIC COLORS FOR BLOCK VARIETY  (DONE)

    \\\\\\\\\\\\\\\\\\V0.1 MODEL NOTES//////////////////
    - GRID IS NOW 20X20 LEVEL POTENCIAL           (DONE)
    - PLAYER MOVEMENT ADDED                       (DONE)
    - NEXT LEVEL ONCE LEVEL IS CLEARED CONDITION  (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.2 MODEL NOTES//////////////////
    - IMPROVED FRAMERATE ON HEAVIER MAP LOADS     (DONE)
    - GAME HAS GRID BARRIERS                      (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.3 MODEL NOTES//////////////////
    - MAKE LEVEL TRANSITION FEEL NICER            (DONE)
    - ADD A TURN COUNTER FOR EACH LEVEL           (DONE)
    - ADD A SCREEN BUFFER FOR UPDATING THE GRID   (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.4 MODEL NOTES//////////////////
    - ADD SPECIFIC PLAYER COLORS FOR VARIETY      (DONE)
    - RESTART KEY FOR PLAYING LEVELS BETTER       (DONE)
    - INCLUDE A SPECIAL RENDERER DURRING GAMEPLAY (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.5 MODEL NOTES//////////////////
    - ADD MORE DEMO LEVELS                        (DONE)
    - POSSIBLE UI LEVEL SELECT OR INSTRUCTIONS    (DONE)
    - ADD UI FOR USER LEVEL BUILDING              (BETA)
    - ADD PERMANENT TELEPORTATION BLOCK           (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.6 MODEL NOTES//////////////////
    - ADD ONE TIME USE TELEPORTATION BLOCK        (DONE)
    - SMARTER MULTISTEP AI SOLVING SEQUENCE       (BETA)
    - ABILITY TO USE SCREEN SWIPING               (DONE)
    - ABILITY TO SWIPE MULTIPLE TIMES ON PRESS    (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.7 MODEL NOTES//////////////////
    - TELL THE USER WHEN THERE ARE NO MORE LEVELS (DONE)
    - FIXED ISSUE WITH TILE LOCK AFTER STOPPING   (DONE)
    - FIXED ISSUE WITH END TITLE SCREEN REFRESH   (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.8 MODEL NOTES//////////////////
    - ADD ARROWS TO SWAP IN BETWEEN LEVEL LIBRARY (DONE)
    - IMPROVED SPACING ON LEVEL SELECT HOMESCREEN (DONE)
    - ADD AN INTRO SCREEN GIVING USER INFO        (DONE)
    - RESIZE BUTTON IN LEVEL EDITOR GRID          (DONE)
    
    \\\\\\\\\\\\\\\\\\V0.9 MODEL NOTES//////////////////
    - LEVEL EDITOR SAVES LEVEL PROGRESS           (DONE)
    - INTERACTIVE SOUND EFFECTS FOR USERS         (DONE)
    - OPTION TO ADD OR REMOVE LEVELS              (DONE)
    
    \\\\\\\\\\\\\\\\\\V1.0 MODEL NOTES//////////////////
    - OPTION TO TURN ON OR OFF SOUND              (DONE)
    - OPTION TO RUN AT A HIGHER FRAMERATE         (DONE)
    - ADD CODEASAUROUS'S DISCORD QR CODE          (DONE)
    
    \\\\\\\\\\\\\\\\\\V1.1 MODEL NOTES//////////////////
    - FIXING MANY FATAL OPTION SCREEN BUGS        (DONE)
    - ADDING FEEDBACK SOUNDS FOR MORE IMMERSION   (DONE)
    - LEVEL EDITOR COLLISION BOXES REFINED        (DONE)
    
    \\\\\\\\\\\\\\\\\\V1.2 MODEL NOTES//////////////////
    - ADDING THE SAME EFFECT TO SIMALAR CASE UI   (DONE)
    - ADDING LEVEL CONTRIBUTORS ON INFO SCREEN    (DONE)
    - LEVEL EDITOR RESIZE RENDER BUG FIX [AGAIN]  (DONE)
    
    \\\\\\\\\\\\\\\\\\V1.3 MODEL NOTES//////////////////
    - OPTION FOR PERSONAL KEYBINDS FOR USER       (DONE)
    - ADD A HOW TO PLAY SCREEN??                  (UNKN)
    - OPTIMIZING LEVEL BOOT BY USING BUFFERS      (DONE)
    - ^ FIXING MOBILE INCOMPATIBILITY WITH METHOD (DONE)
    - FIXING A TELEPORTER FROM INFINITE LOOPING   (DONE)
    - FIXING A KEYBIND ISSUE WITH NAITIVE KEYS    (DONE)
    - FIXING A LEVEL BUG OF COPYING SHORTCUT      (DONE)
    - FIXING A MENU BUG ON LEVEL EXITING TO MENU  (DONE)
    - FIXING A MENU BUG ON LEVEL SELECT REGIStER  (DONE)
    - ADDING A RESIZE SCREEN FOR LEVEL MAKER      (DONE)
    - FIXING A KEYBIND ISSUE IN PREFERENCE SCREEN (DONE)
    
    \\\\\\\\\\\\\\\\\\V1.4 FUTURE NOTES//////////////////
    - MAKE THE RESIZE GRID FUNCTION EASIER        (DONE)
    - ADD UI FOR USER LEVEL BUILDING              (BETA)
    - POSSIBLY ADD PLAYER PARTICLE EFFECTS        (NONE)
    - MAKE IT POSSIBLE TO ZOOM ON SMALLER LEVELS  (NONE)
    - SMARTER MULTISTEP AI SOLVING SEQUENCE       (BETA)
    - IMPROVED RENDER TIME BETWEEN SMALLER LEVELS (DONE)
    - MAKE IT POSSIBLE TO ZOOM ON SMALLER LEVELS  (NONE)
*/
/*
player attributes
0: spawnpoints for the beginning levels
1: current direction the player is moving
2: test dummy AI enabled?
3: player colorlist
*/
var player = [
  [251, 250, 271, 272, 272, 272, 272, 294, 316, 294, // 0-9
    294, 272, 294, 294, 294, 206, 294, 294, 294, 294, // 10-19
    294, 294, 338, 388, 272, 294, 316, 294, 316, 316, // 20-29
    338, 378, 397, 325, 438, 376, 290, 357, 209, 83 // 30-39
  ], 0, false, [[255, 0, 0], /*Red*/[0, 255, 0], /*Green*/[0, 0, 255], /*Blue*/[0, 255, 255],/*Teal*/[255, 0, 255], /*Purple*/[255, 255, 0], /*Yellow*/[255, 51, 153], /*Pink*/[153, 255, 51], /*Lime Green*/[51, 153, 255], /*Light Blue*/[255, 128, 0] /*Orange*/]];
var rpos = [].concat(player[0]); // in charge of respawning the player
var _tpl = 0; // keeps track of last known player level on other screens
var level = 0; // Identifier for what level and stats are loaded
var tran = -460; // in charge for the slider effect
var moves = []; // move counter for levels
var clr = randomNumber(0, player[3].length - 1); var bclr = [0, 0, 0]; // player and trail color
var row = 0; var test = false; var adjust = World.frameRate / 30;
camera.on(); camera.zoom -= 0.130434783;
var tile = [
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL 9
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 0, 2, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 0, 2, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 0, 2, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 0, 2, 0, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 0, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 1, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // A GAME LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 2, 0, 3, 3, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 3, 3, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 1, 2, 2, 0, 3, 3, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 3, 3, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // DUCK STUDIOS LEVEL
  [3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 3, 0, 0, 3, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 0, 0, 3, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 2, 3, 0, 3, 2, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 2, 2, 2, 0, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 2, 3, 0, 2, 3, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 3, 3, 3, 3, 3, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 2, 3, 3, 3, 3, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 0, 0, 3, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 0, 1, 3],
  // A GAME LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 3, 3, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 3, 3, 2, 0, 0, 0, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 3, 3, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 2, 3, 3, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 2, 3, 3, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 3, 3, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 3, 3, 2, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 3, 3, 2, 2, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 3, 3, 2, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 3, 3, 2, 0, 2, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 3, 3, 2, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 0, 0, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 3, 3, 3, 0, 2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // LEVEL
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 3, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  // MAGICAL LEVEL
  [3, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 5, 3, 5, 0, 0, 0, 0, 5, 2, 5, 0, 0, 0, 2, 0, 4, 0, 0, 3, 3, 2, 0, 0, 3, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0, 2, 0, 3, 3, 0, 0, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 1, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 2, 0, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 2, 3, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 2, 0, 3, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 0, 2, 0, 2, 2, 3, 3, 2, 5, 0, 3, 0, 0, 3, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0, 0, 4, 4, 3, 3, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 0, 2, 0, 0, 0, 3, 3, 0, 0, 2, 0, 0, 3, 3, 0, 3, 0, 5, 3, 0, 3, 0, 0, 2, 0, 0, 0, 3, 3, 2, 0, 5, 2, 0, 0, 3, 0, 3, 0, 0, 3, 0, 3, 3, 0, 2, 0, 0, 0, 3, 3, 2, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 0, 3, 4, 3, 4, 0, 0, 0, 3, 3, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 3, 0, 0, 3, 0, 2, 0, 3, 3, 0, 2, 0, 5, 2, 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 5, 5, 2, 3, 3, 0, 5, 2, 2, 0, 0, 0, 0, 3, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 5, 0, 2, 2, 0, 3, 5, 0, 0, 3, 3, 0, 5, 2, 0, 0, 5, 0, 0, 2, 0, 0, 0, 0, 0, 5, 0, 3, 2, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 3, 5, 0, 0, 3]
];
/* 
form tiles over grid typeof block 
0: unfilled block 
1 && 4.1 && 5.1: playerfilled block 
2: solid block 
3: solid invisible block
4: A TELEPORT BLOCK
5: ONE TIME USE TELEPORTER
*/
var complete = [[].concat(player[0]), [].concat(tile), [], []]; // in charge of the level status
var _que = []; // AI MOVE ACCUMULATOR
var _obj = 0; // block Object selector
var _ = undefined;
var _ld = [mouseX, mouseY]; // used for mobile users last known drag position
tile[level][player[0][level]] = 1; var t = 0; var scr = -1; var _fin = ["ERROR 404...\nBY: Varrience\n\tThanks For\n\t\t\tPlaying\n\t\t\tAMAZE!", 0, 10];
var _fade = [5, 0, 0.07]; // (bool,start,incrementation)
for (i = 0; i < tile.length; i++) { moves[i] = 0; complete[2][i] = moves[i]; complete[3][i] = false }
var demo = [].concat(tile[level]); var _tfc = 0; var alarm = [0, 0];
var opt = [[30, [].concat(player[3]), "ON", [[[].concat(player[0]), player[1], player[2], player[3]], [].concat(rpos), [].concat(moves), [].concat(tile), [[].concat(complete[0]), [].concat(complete[1]), [].concat(complete[2]), [].concat(complete[3])]], 0, ["Labtop", 1]],
[30, [].concat(player[3]), "ON", [[[].concat(player[0]), player[1], player[2], player[3]], [].concat(rpos), [].concat(moves), [].concat(tile), [[].concat(complete[0]), [].concat(complete[1]), [].concat(complete[2]), [].concat(complete[3])]], 0, ["Labtop", 1]]];
var pcr = 0; // player color row
var pcs = 0; // player color select
var dial = [0, 0, 0]; // R G B
var publish = [false, "NO"]; // UI for level on if it can be added? 
var axis = 50; // Offset of color dial
var lr = 0; // level row for Preference Screen
var qr = loadImage("assets/codeasaurous.png"); // Disclaimer Discord
// ALLOWS THE USER TO HAVE SPECIFIC KEY CHOICES FOR DIRECTIONS 
var keybind = [["up", -22, "W"], ["down", 22, "S"], ["left", -1, "A"], ["right", 1, "D"], ["W", "S", "A", "D"]]; var kbf;
var gen = createGraphics(400, 400); if (isMobile()) { opt[0][5] = ["Mobile", 0.5]; gen.scale(0.5); }
// IN CHARGE OF THE LEVEL DESIGNERS MEMORY AND STATUS
var ldes = [[3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], [undefined, undefined, undefined, undefined]];
var persistentMarker = false; // ENABLES DRAG ON DRAW
// Responsible for the map resize tool
var rMap = {
  map: [].concat(ldes),
  x: width / 2 - 125,
  y: 35,
  width: 250,
  height: 250,
  aspectRatio: false,
  xslider: new slider(75, 320, 220, 20, 0, 20, 20, 255, 0),
  yslider: new slider(75, 340, 220, 20, 0, 20, 20, 255, 0),
  mode: 0,
  allignTxt: ["Top Left", "Top Right", "Bottom Left", "Bottom Right", "Dead Center", "Top Center", "Bottom Center"],
  init: function () {
    camera.zoom = 1;
    background(100);
    this.cellWidth = this.width / 20;
    this.cellHeight = this.height / 20;
    push();
    fill(255, 255, 255, 150); stroke(255, 255, 255, 150);
    textSize(23);
    text("Back", 0, 20);
    textSize(25);
    textAlign(CENTER, CENTER);
    text("ADJUST GRID", 200, 20);
    textSize(20);
    text("Save & Return", 200, 380);
    this.update();
    pop();
  },
  update: function () {
    push();
    for (var y = 0; y < 20; y++) {
      for (var x = 1; x < 21; x++) {
        if (this.map[y * 22 + x] > 1) { fill(0); stroke(0) } else { fill(255); stroke(0) }
        rect(this.x + this.cellWidth * (x - 1), this.y + this.cellHeight * y, this.cellWidth, this.cellHeight);
      }
    }
    pop();
  },
  back: function () {
    scr = 2; test = true;
  },
  save: function () {
    tile[level] = [].concat(rMap.map); complete[3][level] = false;
    this.back();
    setTimeout(function () { test = true }, 100);
  },
  resize: function () {
    var r = this.xslider.total;
    var c = this.yslider.total;
    this.map = resize(this.mode, c, r);
    this.update();
  },
  main: function () {
    var xslider = this.xslider;
    var yslider = this.yslider;
    fill(100); stroke(100);
    rect(xslider.x + xslider.width + 10, xslider.y, 40, xslider.height * 2);
    textSize(20);
    rect(130, 290, textWidth(this.allignTxt[6]) + 35, textSize() + 20);
    xslider.display();
    text(xslider.total, xslider.x + xslider.width + 20, xslider.y + xslider.height);
    yslider.display();
    text(yslider.total, yslider.x + yslider.width + 20, yslider.y + yslider.height);
    text(this.mode + ": " + this.allignTxt[this.mode], 140, 310);
    if (this.aspectRatio && (this.xslider.modify || this.yslider.modify)) { this.yslider.modify = this.xslider.modify = true }
    if (mouseWentUp("leftButton")) { this.resize(this.mode, xslider.total, yslider.total) }
    if (mouseWentDown("leftButton") && mouseX > 0 && mouseX <= 51.13232421875 && mouseY > 0 && mouseY < 23) { this.back() }
    if (mouseWentDown("leftButton") && mouseX > 200 - (130.068359375 / 2) && mouseX <= 200 + (130.068359375 / 2) && mouseY > 365 && mouseY < 395) {
      this.save();
    }
    if (mouseWentDown("leftButton") &&
      mouseX > 130 &&
      mouseX < 130 + textWidth(this.allignTxt[6]) &&
      mouseY > 290 &&
      mouseY < 290 + textSize()) { this.mode = this.mode + 1 > 6 ? 0 : this.mode + 1 }

  }
};
/**************************************************************************************************************************
              PROJECT STATUS FOR HOW WELL IT'S PERFORMING
**************************************************************************************************************************/
var visitors;
var send = window["setKey" + "Value"];
var pull = window["getKey" + "Value"];
var user = getUserId().replace("\\", "(");
pull("visitors", function (value) {
  if (value == undefined) {
    send("visitors", { users: {}, length: 0, ran: 0 }, function () { visitors = { users: {}, length: 0, ran: 0 }; addVisitor() });
  } else { visitors = value; addVisitor(); }

});
function addVisitor() {
  if (!(user in visitors.users)) {
    visitors.users[user] = visitors.length;
    visitors.length++;
  }
  visitors.ran++;
  console.log("There has been " + visitors.length + " visitor(s) so far! and it has been played " + visitors.ran + " time(s)!");
  send("visitors", visitors);
}
/**************************************************************************************************************************
            FUNCTION MAIN() INITIALISED HERE
**************************************************************************************************************************/
function draw() {
  adjust = 30 / World.frameRate;
  switch (scr) {
    // COPYRIGHT SCREEN FAIR USE CLAIM SCREEN
    case -1: background(rgb(0, 110, 51, _fade[2]));
      // image(qr,330,280,100,100);
      image(qr, 0, 0, 462, 462, 329, 283, 100, 100);
      fill(rgb(255, 255, 255, _fade[2])); stroke(rgb(255, 255, 255, _fade[2])); textSize(20); textAlign(LEFT, BASELINE);
      text("This Game Has Been Made Under Fair Use Claim\nTo A Simalar Mobile Game With The Same Name...\nWith Accorance To Section 107 Of Copyright Claim-\nMaterial This Code Is All Original And Open Source\nDue To This Disclaimer I Will Not Be Held Liable Or\nAccountable For Any Tampered Version Engines!\nCreator: Varrience\nDocumentation: V1.3 (STABLE)\nDiscord: Codeasaurous (unoffical code.org discord)\nUpdate: May Not Happen Join Discord If You Wish-\nTo Know More! Bug Fixes Will Be Added If Needed\n\t\t\tIf You Wish To Start The Game Hit Continue", -30, -10);
      textSize(60); text("CONTINUE", 10, 350);
      textSize(14); text("Level Contributors: A GAMES & DUCK STUDIOS & MAGICAL", -30, 425);
      noFill(); rect(10, 290, 310, 80);
      if (_tfc < 5) { _tfc += _fade[2] }
      else if (mouseWentDown("leftButton") && mouseX > 27 && mouseX < 305 && mouseY > 270 && mouseY < 340) {
        setTimeout(function () { scr++; updateMenu() }, 0); sound("assets/category_hits/retro_game_weapon_-_sword_on_shield_3.mp3"); return
      }
      break;
    // MENU SCREEN
    case 0: camera.zoom = 1; if (test) { updateMenu(); test = false }// homescreen
      fill(rgb(0, 0, 0)); noStroke(); rect(96, 101, 148, 24); rect(256, 101, 143, 24);
      textSize(20); noFill(); stroke(rgb(255, 255, 255)); text("Best: \t\t\t\t\t\t\t\t   Total: ", 100, 120);
      var _trc = [textWidth(moves[level]), textWidth(moves.reduce(function (acc, val) { return (acc + val) }, 0))];
      if (str(moves[level]).length > 7) { textSize(20 * (94 / _trc[0])); } else { textSize(20) } text(moves[level], 150, 120);
      if (str(moves.reduce(function (acc, val) { return (acc + val) }, 0)).length > 7) { textSize(20 * (94 / _trc[1])); } else { textSize(20) }
      text(moves.reduce(function (acc, val) { return (acc + val) }, 0), 305, 120);
      if (mouseWentDown("leftButton") && mouseX >= 50 && mouseX <= 349 && mouseY >= 135 && mouseY <= 290) { // level list detection
        var xx, yy, tt, rowLength; xx = floor((mouseX - 50) / 30); yy = floor((mouseY - 135) / 39); rowLength = 10;
        tt = rowLength * yy + xx + (40 * row);
        if (tt < tile.length && tt !== level) {
          noFill(); stroke(rgb(0, 0, 0)); rect(30 * ((level % 40) % 10) + 50, 138 + (floor((level % 40) / 10) * 40), 30, 30);
          level = tt;
          if ((40 * row) + level % 40 === level) { noFill(); stroke(rgb(255, 255, 255)); rect(30 * ((level % 40) % 10) + 50, 138 + (floor((level % 40) / 10) * 40), 30, 30); }
          sound("assets/category_collect/collect_item_bling_1.mp3");
        }
      }
      // option button
      if (mouseWentDown("leftButton") && mouseX >= 320 && mouseX <= 400 && mouseY >= 0 && mouseY <= 14) {
        scr = 0.1; sound("assets/category_collect/vibrant_game_tone_bling_1.mp3"); _tpl = level; break;
      }
      // play button
      if (mouseWentDown("leftButton") && mouseX > 150 && mouseX < 230 && mouseY > 290 && mouseY < 330) {
        scr = 1; camera.zoom -= 0.130434783; go(_, _, -460); screen(); sound("assets/category_hits/vibrant_game_smash_hit_open_1.mp3"); break;
      }
      // Arrows To Naviagate Level Selection Screen
      // BACK ARROW
      if (mouseWentDown("leftButton") && mouseX > 0 && mouseX < 40 && mouseY > 130 && mouseY < 290 && row !== 0) {
        row--; test = true; sound("assets/category_hits/vibrant_next_page_button.mp3"); setTimeout(function () { }, 0);
      } else if (mouseWentDown("leftButton") && mouseX > 0 && mouseX < 40 && mouseY > 130 && mouseY < 290) { sound("assets/category_hits/retro_game_weapon_-_gauntlet_punch_2.mp3"); }
      // FOWARD ARROW
      if (mouseWentDown("leftButton") && mouseX > 360 && mouseX < 400 && mouseY > 130 && mouseY < 290 && tile.length > 40 * (row + 1)) {
        row++; test = true; sound("assets/category_hits/vibrant_next_page_button.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 360 && mouseX < 400 && mouseY > 130 && mouseY < 290) { sound("assets/category_hits/retro_game_weapon_-_gauntlet_punch_2.mp3"); }
      // Level create button
      if (mouseWentDown("leftButton") && mouseX > 90 && mouseX < 310 && mouseY > 340 && mouseY < 370) {
        scr = 2; _tpl = level; level = tile.length; sound("assets/category_collect/vibrant_game_tone_bling_1.mp3");
        tile.push([].concat(ldes[0])); moves.push(0);
        for (i = 0; i < ldes[1].length; i++) { complete[i][level] = ldes[1][i] }
        player[0].push(tile[level].indexOf(1)); rpos.push(player[0][level]);
        camera.zoom -= 0.130434783;
        tran = 0; t = 0; screen(0, 20, 20, 18); image(gen, 0, 0); if (!complete[3][level]) { publish = [false, "NO"]; } else { publish = [true, "YES"] }
      }
      break;
    case 0.1: // preference screen
      background(rgb(50, 50, 50));
      textSize(20); noFill(); stroke(rgb(255, 255, 255)); text("Back", 0, 17);
      text("FPS:" + round(World.frameRate), 330, 17);
      textSize(25); text("Target FPS: " + opt[0][0] + "\t\t\t\tDevice: " + opt[0][5][0]
        + "\nPlayer Colors:\tRow: " + pcr + " / " + floor((opt[0][1].length - 1) / 11) + "\n\n\t\t[ADD] [DEL] [DEL ALL] [DFLT]\n\n\n\n\nSOUND: " + opt[0][2] +
        "\nLevel Options:\n\t\t[IMP] [DEL] [DEL ALL] [DFLT]", 0, 60);
      textSize(20); text("KEYS U:\t\t D:\t\t L:\t\t R:", 70, 20);
      textAlign(CENTER);
      for (i = 0; i < keybind.length - 1; i++) {
        rect(148 + (45 * i), 0, 30, 30);
        text(keybind[i][2], 163 + (46 * i), 20);
        if (mouseWentDown("leftButton") && mouseX >= 148 + (45 * i) && mouseX <= 178 + (45 * i) && mouseY >= 0 && mouseY <= 30) {
          sound("assets/category_app/app_interface_click.mp3");
          if (kbf >= 0) { keybind[kbf][2] = keybind[4][kbf]; kbf = undefined }
          kbf = i; keybind[i][2] = ""; alarm[1] = opt[0][0] * 2;
        }
      } if (alarm[1] > 0) {
        alarm[1] -= 1 * adjust;
        if (keyDown(key)) {
          var ___l = keybind[4].indexOf(key.toUpperCase());
          if (___l > -1) { keybind[4][___l] = keybind[4][kbf]; keybind[___l][2] = keybind[4][kbf]; }
          keybind[kbf][2] = key.toUpperCase(); keybind[4][kbf] = key.toUpperCase(); kbf = undefined; alarm[1] = 0
          sound("assets/category_tap/percussion_echo_notification2.mp3");
        }
      }
      else if (kbf >= 0) {
        keybind[kbf][2] = keybind[4][kbf]; kbf = undefined
        sound("assets/category_tap/negative_select_1.mp3");
      }
      rect(30, 100, 340, 30);
      // level row collisions
      if (mouseWentDown("leftButton") && mouseX > 175 && mouseX < 383 && mouseY > 309 && mouseY < 341) {
        var tt = floor((mouseX - 175) / 21 + (10 * lr));
        if (tt < tile.length && tt !== level) { level = tt; sound("assets/category_collect/collect_item_bling_1.mp3"); } else {
          demo = [].concat(tile[tt]);
          for (i = 0; i < 440; i++) { if (demo[i] == 1) { demo[i] = 0 } }
          demo[opt[0][3][1][tt]] = 1
        }
      }
      // level row drawer
      textSize(20 - (str(lr * 10).length - 1) * 4); textAlign(CENTER, CENTER);
      for (i = 0; i < 10; i++) {
        if (lr * 10 + i > tile.length - 1) { break }
        text(lr * 10 + i, 185 + i * 21, 335);
        if (lr * 10 + i === level) { rect(175 + i * 21, 320, 20, 30) }
      }
      if (lr !== 0) { fill(rgb(255, 255, 255)) } else { noFill() }
      shape(175, 320, 175, 350, 160, 335);
      if (tile.length > (lr + 1) * 10) { fill(rgb(255, 255, 255)) } else { noFill() }
      shape(385, 320, 385, 350, 400, 335); noFill();
      textAlign(LEFT, BASELINE);
      if (pcr !== 0) { fill(rgb(255, 255, 255)); }
      shape(30, 100, 30, 130, 0, 115);
      if (pcr < floor((opt[0][1].length - 1) / 11)) { fill(rgb(255, 255, 255)); stroke(rgb(255, 255, 255)); }
      else { noFill(); } shape(370, 100, 370, 130, 400, 115);

      // Player Color Tile Selection
      for (i = 0; i < 11; i++) {
        if (pcr * 11 + i > opt[0][1].length - 1) { break }
        fill(rgb(opt[0][1][pcr * 11 + i])); stroke(rgb(opt[0][1][pcr * 11 + i]));
        rect(32 + i * 31, 102, 27, 27);
        if (pcr * 11 + i === pcs) {
          fill(rgb(abs(255 - opt[0][1][pcr * 11 + i][0]), abs(255 - opt[0][1][pcr * 11 + i][1]), abs(255 - opt[0][1][pcr * 11 + i][2]))); stroke(rgb(abs(255 - opt[0][1][pcr * 11 + i][0]), abs(255 - opt[0][1][pcr * 11 + i][1]), abs(255 - opt[0][1][pcr * 11 + i][2])));
          ellipse(46 + i * 31, 115, 13);
        }
      }
      // Back button
      if (mouseWentDown("leftButton") && mouseX >= 0 && mouseX <= 45 && mouseY >= 0 && mouseY <= 15) {
        scr = 0; if (tile[_tpl] !== undefined) { level = _tpl; } else { level = tile.length - 1 }
        if (kbf != undefined) { keybind[kbf][2] = keybind[4][kbf]; kbf = undefined; }
        updateMenu(); sound("assets/category_tap/vibrant_power_orb_touch_1.mp3"); return
      }
      // Target framerate button
      if (mouseWentDown("leftButton") && mouseX > 134 && mouseX < 166 && mouseY > 35 && mouseY < 60) {
        if (opt[0][0] === 30) { opt[0][0] = 60 } else { opt[0][0] = 30 }
        World.frameRate = opt[0][0]; sound("assets/category_app/app_interface_click.mp3")
      }
      // Device Being Used?
      if (mouseWentDown("leftButton") && mouseX > 304 && mouseX < 401 && mouseY > 35 && mouseY < 60) {
        if (opt[0][5][0] === "Labtop") { opt[0][5] = ["Mobile", 0.5] }
        else { opt[0][5] = ["Labtop", 2]; } gen.scale(opt[0][5][1]);
        sound("assets/category_app/app_interface_click.mp3");
      }
      // color selector screen
      if (mouseWentDown("leftButton") && mouseX > 30 && mouseX < 370 && mouseY >= 90 && mouseY <= 120) {
        var tt; tt = floor((mouseX - 30) / 31) + (11 * pcr);
        if (tt < opt[0][1].length && pcs !== tt) {
          pcs = tt; sound("assets/category_app/app_interface_button_4.mp3");
        } else {
          dial[0] = player[3][tt][0];
          dial[1] = player[3][tt][1];
          dial[2] = player[3][tt][2];
        }
      }
      // arrow buttons to swap between color rows
      if (mouseWentDown("leftButton") && mouseX > 0 && mouseX < 30 && mouseY > 100 && mouseY < 130 && pcr !== 0) {
        pcr--; sound("assets/category_hits/vibrant_next_page_button.mp3");
      } // BCK Arrow
      else if (mouseWentDown("leftButton") && mouseX > 0 && mouseX < 30 && mouseY > 100 && mouseY < 130) { sound("assets/category_hits/retro_game_weapon_-_gauntlet_punch_2.mp3"); }
      if (mouseWentDown("leftButton") && mouseX > 370 && mouseX < 400 && mouseY > 100 && mouseY < 130 && pcr < floor((opt[0][1].length - 1) / 11)) {
        pcr++; sound("assets/category_hits/vibrant_next_page_button.mp3");
      } // FWD Arrow
      else if (mouseWentDown("leftButton") && mouseX > 370 && mouseX < 400 && mouseY > 100 && mouseY < 130) { sound("assets/category_hits/retro_game_weapon_-_gauntlet_punch_2.mp3"); }
      // customized color dial and color box output
      fill(rgb(dial[0], dial[1], dial[2])); stroke(rgb(255, 255, 255));
      rect(1, 165, 397, 30); textSize(15);
      var _l = ["Red", "Green", "Blue"];
      // Color Dial Collisions
      if (mouseDown("leftButton") && mouseX >= axis - 10 && mouseX <= 255 + axis + 10 && mouseY >= 200 && mouseY <= 274) {
        var tt; tt = floor((mouseY - 200) / 25);
        dial[tt] = mouseX - axis; if (dial[tt] > 255) { dial[tt] = 255 } else if (dial[tt] < 0) { dial[tt] = 0 }
      }
      for (i = 0; i < 3; i++) {
        noFill(); stroke(rgb(255, 255, 255));
        rect(axis, 200 + 25 * i, 255, 20); text(_l[i] + ": " + (dial[i]), 266 + axis, 215 + 25 * i);
        fill(rgb(255, 255, 255)); ellipse(dial[i] + axis, 210 + 25 * i, 20, 20);
      }
      // ADD Button
      if (mouseWentDown("leftButton") && mouseX > 20 && mouseX < 95 && mouseY > 125 && mouseY < 150) {
        opt[0][1].push([].concat(dial)); player[3] = [].concat(opt[0][1]); sound("assets/category_app/app_interface_click.mp3");
      }
      // DELETE Button
      if (mouseWentDown("leftButton") && mouseX > 96 && mouseX < 166 && mouseY > 125 && mouseY < 150 && opt[0][1].length > 1) {
        opt[0][1].splice(pcs, 1); if (pcs > opt[0][1].length - 1) { pcs = opt[0][1].length - 1 }
        if (floor((opt[0][1].length - 1) / 11) < pcr) { pcr = floor((opt[0][1].length - 1) / 11) }
        player[3] = [].concat(opt[0][1]); sound("assets/category_app/app_interface_click.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 96 && mouseX < 166 && mouseY > 125 && mouseY < 150) {
        sound("assets/category_tap/negative_select_2.mp3");
      }
      // DELETE All Button
      if (mouseWentDown("leftButton") && mouseX > 168 && mouseX < 285 && mouseY > 125 && mouseY < 150 && opt[0][1].length > 1) {
        opt[0][1] = [opt[0][1][pcs]]; pcr = 0; pcs = 0; player[3] = [].concat(opt[0][1]); sound("assets/category_app/app_interface_click.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 168 && mouseX < 285 && mouseY > 125 && mouseY < 150) {
        sound("assets/category_tap/negative_select_2.mp3");
      }
      // DEFAULT Button
      if (mouseWentDown("leftButton") && mouseX > 287 && mouseX < 365 && mouseY > 125 && mouseY < 150) {
        opt[0][1] = [].concat(opt[1][1]); player[3] = [].concat(opt[0][1]); sound("assets/category_app/app_interface_click.mp3");
      }
      // SOUND ON/OFF Button
      if (mouseWentDown("leftButton") && mouseX > 95 && mouseX < 155 && mouseY >= 280 && mouseY <= 305) {
        switch (opt[0][2]) {
          case "ON": opt[0][2] = "OFF"; break;
          case "OFF": opt[0][2] = "ON"; break;
        } sound("assets/category_app/app_interface_click.mp3");
      }
      // ARROWS TO SWAP BETWEEN MINI LEVEL SELECTOR
      if (mouseWentDown("leftButton") && mouseX > 154 && mouseX < 176 && mouseY > 309 && mouseY < 341 && lr !== 0) {
        lr--; sound("assets/category_hits/vibrant_next_page_button.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 154 && mouseX < 176 && mouseY > 309 && mouseY < 341) {
        sound("assets/category_hits/retro_game_weapon_-_gauntlet_punch_2.mp3");
      }
      if (mouseWentDown("leftButton") && mouseX > 382 && mouseX < 401 && mouseY > 309 && mouseY < 341 && lr < floor((tile.length - 1) / 10)) {
        lr++; sound("assets/category_hits/vibrant_next_page_button.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 383 && mouseX < 401 && mouseY > 309 && mouseY < 341) {
        sound("assets/category_hits/retro_game_weapon_-_gauntlet_punch_2.mp3");
      }
      // IMPORT LEVELS
      if (mouseWentDown("leftButton") && mouseX > 19 && mouseX < 86 && mouseY > 344 && mouseY < 376) {
        sound("assets/category_app/app_interface_click.mp3");
        var chr = prompt("enter all level codes here for import use multipe levels can be used at all tiles must be seperated by \",\""); if (chr === null) { return }
        chr = int(chr.split(",")); if (chr.length % 440 === 0) {
          for (i = 0; i < chr.length / 440; i++) {
            var _ts = chr.slice(i * 440, (i + 1) * 440); var lvl = tile.length;
            player[0].push(_ts.indexOf(1)); rpos.push(player[0][lvl]);
            moves.push(0); complete[0].push(player[0][lvl]); complete[1].push([].concat(_ts));
            complete[2].push(0); complete[3].push(false); tile.push([].concat(_ts));
          }
        } else { sound("assets/category_alerts/vibrant_game_negative_bling_1.mp3"); }
      }
      // DELETE LEVEL
      if (mouseWentDown("leftButton") && mouseX > 89 && mouseX < 156 && mouseY > 344 && mouseY < 376 && tile.length > 1) {
        player[0].splice(level, 1); rpos.splice(level, 1);
        moves.splice(level, 1); complete[0].splice(level, 1); complete[1].splice(level, 1);
        complete[2].splice(level, 1); complete[3].splice(level, 1); tile.splice(level, 1);
        sound("assets/category_app/app_interface_click.mp3");
        if (level > tile.length - 1) { level = tile.length - 1 } if (tile.length - 1 < lr * 10) { lr = floor(tile.length / 11) }
      } else if (mouseWentDown("leftButton") && mouseX > 89 && mouseX < 156 && mouseY > 344 && mouseY < 376) {
        sound("assets/category_tap/negative_select_2.mp3");
      }
      // DELETE ALL LEVELS
      if (mouseWentDown("leftButton") && mouseX > 159 && mouseX < 276 && mouseY > 344 && mouseY < 376 && tile.length > 1) {
        player[0] = [player[0][level]]; rpos = [player[0][0]];
        moves = [moves[level]]; complete[0] = [complete[0][level]];
        complete[1] = [complete[1][level]]; complete[2] = [complete[2][level]];
        complete[3] = [complete[3][level]]; tile = [tile[level]]; level = 0; lr = 0;
        sound("assets/category_app/app_interface_click.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 159 && mouseX < 276 && mouseY > 344 && mouseY < 376) {
        sound("assets/category_tap/negative_select_2.mp3");
      }
      // DEFAULT ALL LEVELS
      if (mouseWentDown("leftButton") && mouseX > 279 && mouseX < 356 && mouseY > 344 && mouseY < 376) {
        player = [[].concat(opt[0][3][0][0]), opt[0][3][0][1], opt[0][3][0][2], [].concat(opt[0][1])];
        rpos = [].concat(opt[0][3][1]);
        moves = [].concat(opt[0][3][2]);
        tile = [].concat(opt[0][3][3]);
        complete = [[].concat(opt[0][3][4][0]), [].concat(opt[0][3][4][1]), [].concat(opt[0][3][4][2]), [].concat(opt[0][3][4][3])];
        sound("assets/category_app/app_interface_click.mp3");
      }
      break;
    case 1: // GAMEPLAY SCREEN
      // RESTART BUTTON
      if (keyWentDown("space") || (mouseWentDown("leftButton") && mouseX >= 135 && mouseX <= 185 && mouseY >= 375 && mouseY <= 400 && !test) || (mouseWentDown("leftButton") && mouseX > 105 && mouseX < 155 && mouseY > 375 && mouseY < 400 && test)) {
        go(); screen(); updateScore(); image(gen, 0, 0); sound("assets/category_app/app_slide_6.mp3");
      }
      if (player[1] === 2 && ((keyWentDown("up") || keyWentDown("down") || keyWentDown("left") || keyWentDown("right") || keyWentDown(keybind[0][2]) || keyWentDown(keybind[1][2]) || keyWentDown(keybind[2][2]) || keyWentDown(keybind[3][2])) || player[2])) { player[1] = 0 }
      if (t >= tile[level].length && level < tile.length && tran >= 460) {
        complete[0][level] = player[0][level]; complete[1][level] = [].concat(tile[level]);
        if (moves[level] > 0 && complete[2][level] > moves[level] || complete[2][level] === 0) { complete[2][level] = moves[level]; }
        complete[3][level] = true;
        if (test) {
          scr = 2; player[2] = false; go(); gen.background(bclr); screen(0, 20, 20, 18); image(gen, 0, 0); return;
        }
        // USE FOR FINAL MESSAGE TO THE USER
        if (level + 1 === tile.length) {
          // USE A BETA FADE TRANSITION
          if (_fade[0] > _fade[1]) {
            _fade[1] += _fade[2];
            fill(rgb(0, 0, 255, _fade[2])); stroke(rgb(0, 0, 255, _fade[2]));
            rect(-30, -30, 460, 430);
          } else { background(rgb(0, 0, 255)) }
          // END OF BETA FADE
          if (_fade[0] < _fade[1]) {
            fill("white"); stroke("white"); textSize(70);
            text(_fin[0].substring(0, _fin[1]), -30, 30);
            if (_fin[1] < _fin[0].length && _fin[2] < 0) { _fin[1]++; _fin[2] = 2 } else { _fin[2] -= 1 * adjust }
          }
        }
      }
      // EASIER MOBILE USE INCORPERATE SLIDE ON THE SCREEN
      if (mouseWentDown("leftButton")) { _ld = [mouseX, mouseY] } // test for initial drag
      if (mouseDown("leftButton") && (abs(mouseX - _ld[0]) > 20 || abs(mouseY - _ld[1]) > 20) && (player[1] === 0 || player[1] === 2) && tran === 0) {
        var clc = [mouseX - _ld[0], mouseY - _ld[1]];
        if (abs(clc[0]) > abs(clc[1]) && clc[0] > 0) {
          pcm("right", 1, true);
        } else if (abs(clc[0]) > abs(clc[1])) {
          pcm("left", -1, true);
        }
        if (abs(clc[0]) < abs(clc[1]) && clc[1] > 0) {
          pcm("down", 22, true);
        } else if (abs(clc[0]) < abs(clc[1])) {
          pcm("up", -22, true);
        } _ld = [mouseX, mouseY];
      }
      if (tran < 460 && t === tile[level].length) {
        if (tran === 0) { sound("assets/category_achievements/melodic_win_1.mp3"); screen() }
        tran = move(tran, 460, 13 * adjust); player[1] = 2; background(bclr); updateScore(); image(gen, tran, 0)
      }
      else if (t >= tile[level].length && level < tile.length - 1) {
        complete[0][level] = player[0][level]; complete[1][level] = [].concat(tile[level]);
        if (moves[level] > 0 && complete[2][level] > moves[level] || complete[2][level] === 0) { complete[2][level] = moves[level]; }
        complete[3][level] = true;
        level++; clr = randomNumber(0, player[3].length - 1);
        //for(i=0;i<3;i++){bclr[i] = player[3][clr][i];}
        t = 0; tile[level][player[0][level]] = 1; for (i = 0; i < tile[level].length; i++) { if (tile[level][i] > 0) { t++ } }
        player[1] = 2; tran = -460; screen()
      }
      else if (tran < 0) {
        tran = move(tran, 0, 13 * adjust); if (tran === 0) { sound("assets/category_points/vibrant_game_ding_touch_1.mp3") }
        background(bclr); updateScore(); image(gen, tran, 0); player[1] = 2;
      }
      if (alarm[0] < 1 && (player[1] !== 0 && player[1] !== 2)) {
        pmc(player[1]);
        alarm[0] = opt[0][0] / 30 - 1 + opt[0][4]
      } else { alarm[0] -= 1 * adjust }
      // move counter for game
      // also used for bottom UI on screen
      fill(rgb(bclr[0], bclr[1], bclr[2])); stroke(rgb(bclr[0], bclr[1], bclr[2]));
      rect(-30, 405, 460, 25);
      textSize(20); fill(rgb(abs(bclr[0] - 255), abs(bclr[1] - 255), abs(bclr[2] - 255))); stroke(rgb(abs(bclr[0] - 255), abs(bclr[1] - 255), abs(bclr[2] - 255)));
      textFont("Times New Roman");
      var _tpm = ""; if (complete[3][level]) { _tpm = "Complete" }
      // UI collisions
      switch (test) {
        case false:
          text("Menu\tBack\tSkip\tReplay\tFwrd\t" + _tpm, -25, 425);
          // MENU
          if (mouseWentDown("leftButton") && mouseX >= 0 && mouseX <= 45 && mouseY >= 375 && mouseY <= 400 && (complete[3][level] || t !== tile[level].length)) {
            camera.zoom = 1; scr = 0; moves[level] = complete[2][level];
            for (i = 0; i < tile.length; i++) { tile[i] = [].concat(complete[1][i]); player[0][i] = complete[0][i]; moves[i] = complete[2][i]; }
            sound("assets/category_tap/vibrant_power_orb_touch_1.mp3"); test = true;
          }
          // BACK
          if (mouseWentDown("leftButton") && mouseX >= 50 && mouseX <= 90 && mouseY >= 375 && mouseY <= 400 && level > 0 && (complete[3][level] || t !== tile[level].length)) {
            if (level + 1 === tile.length && tran !== 0) { go(); screen(); updateScore(); image(gen, 0, 0); }
            else { level--; go(); screen(); updateScore(); image(gen, 0, 0); } sound("assets/category_app/perfect_app_button_5.mp3");
          } else if (mouseWentDown("leftButton") && mouseX >= 50 && mouseX <= 90 && mouseY >= 375 && mouseY <= 400) {
            sound("assets/category_tap/negative_select_2.mp3");
          }
          // SKIP
          if (mouseWentDown("leftButton") && mouseX >= 95 && mouseX <= 125 && mouseY >= 375 && mouseY <= 400 && level < tile.length - 1 && t !== tile[level].length && (complete[3][level] || t !== tile[level].length)) {
            level++; go(); screen(); updateScore(); image(gen, 0, 0); sound("assets/category_app/app_menu_button_10.mp3");
          } else if (mouseWentDown("leftButton") && mouseX > 95 && mouseX < 125 && mouseY > 375 && mouseY < 400) {
            sound("assets/category_tap/negative_select_2.mp3")
          }
          // FWRD
          if (mouseWentDown("leftButton") && mouseX >= 195 && mouseX <= 230 && mouseY >= 375 && mouseY <= 400 && complete[3][level] && level < tile.length - 1) {
            do { tile[level] = [].concat(complete[1][level]); player[0][level] = complete[0][level]; moves[level] = complete[2][level]; level++; }
            while (complete[3][level] && level < tile.length - 1);
            if (complete[3][level]) {
              tile[level] = complete[1][level]; player[0][level] = complete[0][level]; t = 440; moves[level] = complete[2][level]; tran = 459
            }
            else { go(_, _, -460); updateScore(); screen(); image(gen, 0, 0); } sound("assets/category_app/perfect_organic_button.mp3");
          } else if (mouseWentDown("leftButton") && mouseX >= 195 && mouseX <= 230 && mouseY >= 375 && mouseY <= 400) {
            sound("assets/category_tap/negative_select_2.mp3");
          }
          // COMPLETE
          if (_tpm !== "" && mouseWentDown("leftButton") && mouseX >= 240 && mouseX <= 305 && mouseY >= 375 && mouseY <= 400 && t !== tile[level].length) {
            tile[level] = complete[1][level]; player[0][level] = complete[0][level]; t = 440; moves[level] = complete[2][level];
          }
          break;
        case true: text("Stop\tAI Play\tRestart", -25, 425);
          // STOP
          if (mouseWentDown("leftButton") && mouseX >= 0 && mouseX <= 45 && mouseY >= 375 && mouseY <= 400) {
            player[2] = false; scr = 2;
            sound("assets/category_hits/vibrant_game_arcade_game_negative_hit_2.mp3"); go(); screen(0, 20, 20, 18);
          }
          // AI PLAY
          if (mouseWentDown("leftButton") && mouseX >= 50 && mouseX <= 95 && mouseY >= 375 && mouseY <= 400 && test) {
            player[2] = player[2] ? false : true; sound("assets/category_app/app_button_click_1.mp3");
          } if (player[2] && player[1] === 0) {
            aic();
          }
          break;
      }
      if (player[1] === 0 && !player[2] && tran === 0) { for (i = 0; i < keybind.length - 1; i++) { pcm(keybind[i][0], keybind[i][1], false, keybind[i][2]) } }
      break;
    case 2: // LEVEL DESIGNER
      if (test && camera.zoom === 1) {
        camera.zoom -= 0.130434783; test = false; screen(0, 20, 20, 18); image(gen, 0, 0);
      }
      else { camera.zoom = 1; } // IMPORTANT DO NOT REMOVE THIS CAMERA BUFFER
      // UI Top and Bottom Refresh
      fill(rgb(51, 51, 51)); stroke(rgb(51, 51, 51));
      rect(-30, -30, 460, 25); rect(-30, 405, 460, 25);
      // UI object selection options
      var fs = [[rgb(255, 255, 255), rgb(255, 255, 255)], [rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58), rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)], [rgb(120, 120, 120), rgb(120, 120, 120)], [rgb(0, 0, 0), rgb(0, 0, 0)], [rgb(200, 250, 140), rgb(200, 250, 140)], [rgb(230, 140, 190), rgb(200, 250, 140)]];
      for (i = 0; i < fs.length; i++) {
        fill(fs[i][0]); stroke(fs[i][1]);
        rect(260 + i * 30, 408, 20, 20); if (_obj === i) { fill(rgb(255, 255, 255)); stroke(rgb(0, 0, 0)); ellipse(270 + i * 30, 418, 10, 10) }
      }
      // UI button options for additional use
      fill(rgb(255, 255, 255)); stroke(rgb(255, 255, 255)); textSize(20);
      text("Menu\tTest\tAdd\tShare\tImport", -25, 425); //fill(player[3][0]);
      text("Level Builder V1.0\t\tPublishable: " + publish[1], -30, -10); text("Resize Grid", 325, -10);
      // UI collision testing
      // Menu/Save
      if (mouseWentDown("leftButton") && mouseX >= 0 && mouseX <= 45 && mouseY >= 375 && mouseY <= 400 && t !== tile[level].length) {
        persistentMarker = false;
        ldes[0] = [].concat(tile[level]); ldes[1] = [complete[0][level], complete[1][level], complete[2][level], complete[3][level]];
        scr = 0; tile.splice(level, 1); player[0].splice(level, 1); rpos.splice(level, 1); moves.splice(level, 1);
        for (i = 0; i < complete.length; i++) { complete[i].splice(level, 1) }
        level = _tpl; updateMenu();
        sound("assets/category_tap/vibrant_power_orb_touch_1.mp3"); return;
      }
      // Test
      if (mouseWentDown("leftButton") && mouseX >= 55 && mouseX <= 90 && mouseY >= 375 && mouseY <= 400) {
        for (i = 0; i < tile[level].length; i++) { if (tile[level][i] === 1) { player[0][level] = i; rpos[level] = i; break } else if (i === tile[level].length - 1) { console.log("player must be placed in level"); sound("assets/category_alerts/vibrant_game_negative_bling_1.mp3"); return } }
        moves[level] = 0; complete[0][level] = [].concat(player[0][level]);
        complete[0][level] = player[0][level]; complete[1][level] = [].concat(tile[level]);
        complete[2][level] = 0; if (complete[3][level] === undefined) { complete[3][level] = false; }
        sound("assets/category_hits/vibrant_game_ding_ding_bong_hit_1.mp3");
        test = true; camera.zoom -= 0.130434783; scr = 1; go(_, _, -460); screen(); break;
      }
      // Add
      if (mouseWentDown("leftButton") && mouseX >= 95 && mouseX <= 130 && mouseY >= 375 && mouseY <= 400 && complete[3][level] === true) {
        player[0].push(player[0][level]); rpos.push(rpos[level]);
        moves.push(0); complete[0].push([].concat(player[0][level]));
        complete[1].push([].concat(tile[level]));
        complete[2].push(0); complete[3].push(false); tile.push([].concat(tile[level]));
        sound("assets/category_app/app_interface_click.mp3");
      } else if (mouseWentDown("leftButton") && mouseX > 95 && mouseX < 130 && mouseY > 375 && mouseY < 400 && complete[3][level] !== true) {
        console.log("level cannot be published if it has not been tested!");
        sound("assets/category_alerts/vibrant_game_negative_bling_1.mp3");
      }
      // Share
      if (mouseWentDown("leftButton") && mouseX >= 135 && mouseX <= 180 && mouseY >= 375 && mouseY <= 400) {
        sound("assets/category_app/app_interface_click.mp3"); prompt("The level code is:", tile[level]);
      }
      // Import
      if (mouseWentDown("leftButton") && mouseX >= 195 && mouseX <= 245 && mouseY >= 375 && mouseY <= 400) {
        sound("assets/category_app/app_interface_click.mp3");
        var _response = prompt("Insert level code here", demo); if (_response === null) { return }
        _response = int(_response.split(","));
        for (i = 0; i <= _response.length; i++) { if (_response[i] === 1) { player[0][level] = i; break } }
        if (tile[level].length === _response.length) {
          complete[3][level] = false;
          tile[level] = [].concat(_response);
          test = true;
        } else { return }
      }
      // RESIZE GRID
      if (mouseWentDown("leftButton") && mouseX > 305 && mouseX < 400 && mouseY > 0 && mouseY <= 15) {
        sound("assets/category_app/app_interface_click.mp3");
        scr = 2.1; rMap.init();
        /*var _dev = prompt("dev feature type: 0-6, height: 0-20, width: 0-20");
        persistentMarker = false;
        if (_dev != undefined || _dev != null) { _dev = int(_dev.split(",")) } else { return }
        tile[level] = resize(_dev[0], _dev[1], _dev[2]);
        camera.zoom -= 0.130434783; test = true;
        screen(0, 20, 20, 18); image(gen, 0, 0); complete[3][level] = false;*/
      }
      // UI object collision detection
      if (mouseWentDown("leftButton")) { for (i = 0; i < 6; i++) { if (mouseX > (245 + (10 * i)) && mouseX < (265 + (30 * i)) && mouseY >= 375 && mouseY <= 400) { _obj = i; camera.zoom -= 0.130434783; sound("assets/category_app/app_interface_button_4.mp3"); break } } }
      //setTimeout(function(){console.log(floor(mouseX/20)+":"+floor(mouseY/18-1))},10);
      if (keyWentDown("space")) { persistentMarker ^= 1 }
      if ((mouseWentDown("leftButton") || mouseDown("leftButton") && persistentMarker) && mouseY > 20 && mouseY < 377) {
        var xx, yy, tt; xx = floor(mouseX / 20); yy = floor(mouseY / 18 - 1); tt = (yy * 22 + 1) + xx;
        if (tile[level][tt] === _obj) { return }
        if (_obj === 1) {
          fill(rgb(255, 255, 255)); stroke(rgb(0, 0, 0));
          rect((tile[level].indexOf(1) % 22 - 1) * 20 + tran, floor(tile[level].indexOf(1) / 22) * 18 + 20, 20, 18);
          tile[level][tile[level].indexOf(1)] = 0;
          player[0][level] = tt;
        } tile[level][tt] = _obj; complete[3][level] = false;
        sound("assets/category_hits/retro_game_simple_impact_3.mp3");
        switch (tile[level][tt]) {
          case 0: fill(rgb(255, 255, 255)); stroke(rgb(0, 0, 0)); break;
          case 1: fill(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)); stroke(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)); break;
          case 2: fill(rgb(120, 120, 120)); stroke(rgb(60, 60, 60)); break;
          case 3: fill(0, 0, 0); stroke(0, 0, 0); break;
          case 4: fill(rgb(200, 250, 140)); stroke(rgb(200, 250, 140)); break;
          case 5: fill(rgb(230, 140, 190)); stroke(rgb(200, 250, 140)); break;
        } rect((tt % 22 - 1) * 20 + tran, floor(tt / 22) * 18 + 20, 20, 18);
      }
      if (publish[0] !== complete[3][level] && complete[3][level] !== undefined) {
        publish[0] = complete[3][level]; publish[1] = publish[0] === true ? "YES" : "NO";
        camera.zoom -= 0.130434783;
      }
      break;
    /******************************************************************
          MAIN FOCUS OF USING THE RESIZE ELEMENT
    *******************************************************************/
    case 2.1: // RESIZE SCREEN UI
      rMap.main();
  }
}
function choose() { return (arguments[randomNumber(0, arguments.length - 1)]); }
function move(point, des, spd) { return (point = abs(point - des) / spd >= 1 && point < des ? point + spd : abs(point - des) / spd >= 1 && point > des ? point - spd : point = des); }
// INITIALIZING A NEW LEVEL
function go(num, rep, start) {
  num = arguments[0] || 1; rep = arguments[1] || 0;
  start = arguments[2] || 0; _fade[1] = 0; _fin[1] = 0;
  t = 0; player[1] = 0; player[0][level] = rpos[level]; tran = start; moves[level] = 0;
  for (i = 0; i < tile[level].length; i++) {
    switch (tile[level][i]) {
      case num: tile[level][i] = rep; break;
      case 4.1: case 5.1: tile[level][i] = floor(tile[level][i]); break;
    }
  }
  tile[level][player[0][level]] = 1; clr = randomNumber(0, player[3].length - 1);
  for (i = 0; i < tile[level].length; i++) { if (tile[level][i] > 0) { t++ } }
}
// PLAYER MOVEMENT CALCULATOR
function pmc(num) {
  if (arguments.length < 0) { return }
  if (tile[level][player[0][level] + num] <= 1 || tile[level][player[0][level] + num] >= 4) {
    if (tile[level][player[0][level] + num] === 0) { t++ }
    switch (tile[level][player[0][level]]) {
      case 1: case 4.1: case 5.1: fill(rgb(player[3][clr][0], player[3][clr][1], player[3][clr][2])); stroke(rgb(player[3][clr][0] * 0.62, player[3][clr][1] * 0.62, player[3][clr][2] * 0.62)); break;
      case 4: fill(rgb(200, 250, 140)); stroke(rgb(200, 250, 140)); break;
    }
    rect((player[0][level] % 22 - 1) * 20, floor(player[0][level] / 22) * 20, 20, 20);
    player[0][level] += num; sound("assets/category_swish/karate_whoosh_10.mp3");
    switch (tile[level][player[0][level]]) { case 4: case 5: teleport(); break; }
    fill(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)); stroke(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58));
    rect((player[0][level] % 22 - 1) * 20, floor(player[0][level] / 22) * 20, 20, 20);
    if (tile[level][player[0][level]] === 0) { tile[level][player[0][level]] = 1; }
  } else { player[1] = 0; sound("assets/category_objects/switch.mp3") }
}
// PLAYER CAN MOVE CALCULATOR
function pcm(ki, num, pass, add) {
  if (arguments.length < 2 || (player[1] !== 0 && player[1] !== 2)) { return }
  pass = arguments[2] || false; add = arguments[3] || undefined;
  if ((keyDown(ki) || pass || keyDown(add)) && (tile[level][player[0][level] + num] <= 1 || tile[level][player[0][level] + num] >= 4) && (tile[level][player[0][level]] === 4 && tile[level][player[0][level] + num]) !== 4) { player[1] = num; moves[level]++; updateScore(); }
  else if ((keyWentDown(ki) || pass || keyWentDown(add)) && (tile[level][player[0][level]] === 4 || tile[level][player[0][level]] === 5) &&
    (tile[level][player[0][level] + num] === 2 || tile[level][player[0][level] + num] === 3 || tile[level][player[0][level] + num] === 4)) { teleport(); fill(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)); stroke(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)); rect((player[0][level] % 22 - 1) * 20, floor(player[0][level] / 22) * 20, 20, 20); }
}
// HANDLES WORLD SCREEN RENDER
function screen(sX, sY, w, h) {
  sX = arguments[0] || 0; sY = arguments[1] || 0;
  w = arguments[2] || 20; h = arguments[3] || 20;
  background(bclr); gen.background(bclr);
  for (ii = 0; ii < tile[level].length / 22; ii++) {
    for (i = 0; i < tile[level].length / 20; i++) {
      switch (tile[level][(ii * 22 + i)]) {
        case 0: gen.fill(rgb(255, 255, 255)); gen.stroke(rgb(0, 0, 0)); break;
        case 1: case 4.1: case 5.1: gen.fill(rgb(player[3][clr][0], player[3][clr][1], player[3][clr][2])); gen.stroke(rgb(player[3][clr][0] * 0.62, player[3][clr][1] * 0.62, player[3][clr][2] * 0.62)); break;
        case 2: gen.fill(rgb(120, 120, 120)); gen.stroke(rgb(60, 60, 60)); break;
        case 3: continue;
        case 4: gen.fill(rgb(200, 250, 140)); gen.stroke(rgb(200, 250, 140)); break;
        case 5: gen.fill(rgb(230, 140, 190)); gen.stroke(rgb(200, 250, 140)); break;
      } gen.rect((i - 1) * w + sX, ii * h + sY, w, h);
    }
  } gen.fill(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58)); gen.stroke(rgb(player[3][clr][0] * 0.58, player[3][clr][1] * 0.58, player[3][clr][2] * 0.58));
  gen.rect((player[0][level] % 22 - 1) * w + sX, floor(player[0][level] / 22) * h + sY, w, h);
}
// updates player screen score
function updateScore() {
  fill(rgb(bclr[0], bclr[1], bclr[2])); stroke(rgb(bclr[0], bclr[1], bclr[2]));
  rect(-30 + tran, -30, 460, 25);
  textSize(20); fill(rgb(abs(bclr[0] - 255), abs(bclr[1] - 255), abs(bclr[2] - 255))); stroke(rgb(abs(bclr[0] - 255), abs(bclr[1] - 255), abs(bclr[2] - 255))); textFont("Times New Roman");
  var _talt = ["Level: ", level, " Moves: ", moves[level], " / Total: ", moves.reduce(function (acc, val) { return (acc + val) }, 0)];
  var _bnd = []; for (i = 0; i < _talt.length; i++) { _bnd.push(textWidth(_talt[i])) }
  switch (test) {
    // level allocation: 4 moves and total allocation: 11 
    case false:
      for (i = 0; i < _talt.length; i++) {
        switch (i) {
          case 1:
            if (str(_talt[i]).length > 4) {
              textSize(20 * (40 / _bnd[i])); _bnd[i] = textWidth(_talt[i]);
            } else { textSize(20) } break;
          case 3: case 5:
            if (str(_talt[i]).length > 11) {
              textSize(20 * (110 / _bnd[i])); _bnd[i] = textWidth(_talt[i]);
            } else { textSize(20) } break;
          default: textSize(20); break;
        }
        text(_talt[i], -25 + tran + _bnd.slice(0, i).reduce(function (acc, val) { return (acc + val) }, 0), -10);
      } return; case true:
      text("Level Testing Mode: Moves Taken: ", -25 + tran, -10);
      if (str(moves[level]).length > 16) { textSize(20 * (160 / _bnd[3])) }
      text(moves[level], -25 + tran + 289.912109375, -10); return;
  }
}
function updateMenu() {
  background(rgb(0, 0, 0)); camera.zoom = 1;
  noFill(); stroke(rgb(255, 255, 255)); textSize(60); textAlign(CENTER, CENTER);
  text("AMAZE ", 210, 50);
  textAlign(LEFT, BASELINE); textSize(30);
  text("Levels:", 0, 120); textSize(20);
  text("Best: \t\t\t\t\t\t\t\t / Total: ", 100, 120);
  rect(95, 100, 149, 25); rect(255, 100, 144, 25); rect(40, 130, 320, 160);
  textAlign(CENTER); textSize(20);
  for (i = 0; i < 40; i++) { // level list drawer
    if ((40 * row) + i > tile.length - 1) { break }
    if (str(40 * row + i).length > 2) { textSize((20 - (str(40 * row + i).length - 2) * 4)) }
    if (complete[3][i]) { fill(rgb(50, 205, 50)); stroke(rgb(50, 205, 50)) } else { fill(rgb(255, 255, 255)); stroke(rgb(255, 255, 255)) }
    text((40 * row) + i, 65 + (30 * (i % 10)), 160 + (floor(i / 10) * 40));
  } noFill(); textSize(20); stroke(rgb(255, 255, 255)); text("Options", 363, 15);
  if (row !== 0) { fill(rgb(255, 255, 255)); stroke(rgb(255, 255, 255)) }
  else { noFill(); stroke(rgb(255, 255, 255)) }
  shape(40, 130, 40, 290, 0, 210);
  if (tile.length > 40 * (row + 1)) { fill(rgb(255, 255, 255)); stroke(rgb(255, 255, 255)) }
  else { noFill(); stroke(rgb(255, 255, 255)) }
  shape(360, 130, 360, 290, 400, 210);
  noFill(); stroke(rgb(255, 255, 255)); textSize(40); textAlign(CENTER);
  text("Play \nLevel Maker", 200, 325); textAlign(LEFT, BASELINE);
  noFill(); stroke(rgb(0, 0, 0)); rect(30 * ((level % 40) % 10) + 50, 138 + (floor((level % 40) / 10) * 40), 30, 30);
  if ((40 * row) + level % 40 === level) { noFill(); stroke(rgb(255, 255, 255)); rect(30 * ((level % 40) % 10) + 50, 138 + (floor((level % 40) / 10) * 40), 30, 30); }
}
function resize(typ, c, r) {
  var newMap = [].concat(tile[level]); var i, ii;
  if (arguments.length < 2 || c > 20 || r > 20 || c === 0 || r === 0) {
    return (newMap);
  }
  for (i = 0; i < newMap.length; i++) { if (i % 22 === 0) { continue } newMap[i] = 3 }
  typ = arguments[0] || 0;
  player[0][level] = undefined; c = arguments[1] || 0; r = arguments[2] || c;
  switch (typ) {
    case 0:
      for (i = 0; i < c; i++) {
        for (ii = 1; ii <= r; ii++) {
          newMap[(i * 22) + ii] = 0;
        }
      }
      // run how many rows you want to get rid of top left 22
      break; // center top left
    case 1:
      for (i = 0; i < c; i++) {
        for (ii = 20; ii > 20 - r; ii--) {
          newMap[(i * 22) + ii] = 0;
        }
      } break; // center top right
    case 2:
      for (i = 19; i >= 20 - c; i--) {
        for (ii = 1; ii <= r; ii++) {
          newMap[(i * 22) + ii] = 0;
        }
      } break; // bottom left
    case 3:
      for (i = 19; i >= 20 - c; i--) {
        for (ii = 20; ii > 20 - r; ii--) {
          newMap[(i * 22) + ii] = 0;
        }
      } break; // center bottom right
    case 4:
      for (i = 0; i < c; i++) {
        for (ii = 1; ii <= r; ii++) {
          newMap[((10 - floor(c / 2) + i) * 22) + ((10 - floor(r / 2) + ii))] = 0;
        }
      } break; // semi center 
    case 5:
      for (i = 0; i < c; i++) {
        for (ii = 1; ii <= r; ii++) {
          newMap[(i * 22) + ((10 - floor(r / 2) + ii))] = 0;
        }
      }
      break; // top center
    case 6:
      for (i = 19; i >= 20 - c; i--) {
        for (ii = 1; ii <= r; ii++) {
          newMap[(i * 22) + ((10 - floor(r / 2) + ii))] = 0;
        }
      }
      break; // bottom center
  }
  return (newMap);
}
function teleport() {
  var closest = [800];
  for (i = 0; i < tile[level].length; i++) {
    switch (tile[level][i]) {
      case 4: case 5: if (distance(i) > 0 && distance(i) < closest[0]) { closest[0] = distance(i); closest[1] = i } break;
    }
  }
  if (closest[0] !== 800) {
    sound("assets/category_collect/energy_bar_recharge_6.mp3");
    switch (tile[level][player[0][level]]) {
      case 4: fill(rgb(200, 250, 140)); stroke(rgb(200, 250, 140)); break;
      case 5: tile[level][player[0][level]] += 0.1; break;
    }
    rect((player[0][level] % 22 - 1) * 20, floor(player[0][level] / 22) * 20, 20, 20);
    player[0][level] = closest[1];
    if (tile[level][player[0][level]] === 5) { tile[level][player[0][level]] += 0.1 }
  } else { tile[level][player[0][level]] += 0.1 }
}
// AI CALCULATOR
function aic() {
  if (_que.length > 0) {
    switch (_que[0]) {
      case 0: pcm("up", -22, true); break;
      case 1: pcm("down", 22, true); break;
      case 2: pcm("right", 1, true); break;
      case 3: pcm("left", -1, true); break;
    }_que.splice(0, 1); return
  }
  var _wall = [false, false, false, false]; var nearest = [800]; var endpoint = [];
  for (i = 0; i < tile[level].length; i++) {
    if (tile[level][player[0][level] - 22 * i] === 0 && player[1] === 0 && !_wall[0]) { pcm("up", -22, true); return }
    else if (!_wall[0] && (tile[level][player[0][level] - 22 * i] === 2 || tile[level][player[0][level] - 22 * i] === 3)) { _wall[0] = true; endpoint[0] = player[0][level] - (i - 1) * 22 }
    if (tile[level][player[0][level] + 22 * i] === 0 && player[1] === 0 && !_wall[1]) { pcm("down", 22, true); return }
    else if (!_wall[1] && (tile[level][player[0][level] + 22 * i] === 2 || tile[level][player[0][level] + 22 * i] === 3)) { _wall[1] = true; endpoint[1] = player[0][level] + (i - 1) * 22 }
    if (tile[level][player[0][level] + i] === 0 && player[1] === 0 && !_wall[2]) { pcm("right", 1, true); return }
    else if (!_wall[2] && (tile[level][player[0][level] + i] === 2 || tile[level][player[0][level] + i] === 3)) { _wall[2] = true; endpoint[2] = player[0][level] + (i - 1) }
    if (tile[level][player[0][level] - i] === 0 && player[1] === 0 && !_wall[3]) { pcm("left", -1, true); return }
    else if (!_wall[3] && (tile[level][player[0][level] - i] === 2 || tile[level][player[0][level] - i] === 3)) { _wall[3] = true; endpoint[3] = player[0][level] - (i - 1) }
    if (distance(i) > 0 && distance(i) < nearest[0] && tile[level][i] === 0) { nearest[0] = distance(i); nearest[1] = i }
  } // ENDPOINT RANGE SOLVER (TESTS IF ENDPOINT TILES CONTAIN BLANKS) 
  if (player[1] === 0) {
    for (i = 0; i < endpoint.length; i++) {
      if (endpoint[i] === player[0][level]) { continue; } _wall = [false, false, false, false];
      for (ii = 0; ii < tile[level].length; ii++) {
        if (tile[level][endpoint[i] - 22 * ii] === 0 && player[1] === 0 && !_wall[0]) { _que.push(i); return; }
        else if (!_wall[0] && (tile[level][endpoint[i] - 22 * ii] === 2 || tile[level][endpoint[i] - 22 * ii] === 3)) { _wall[0] = true; } //
        if (tile[level][endpoint[i] + 22 * ii] === 0 && player[1] === 0 && !_wall[1]) { _que.push(i); return; }
        else if (!_wall[1] && (tile[level][endpoint[i] + 22 * ii] === 2 || tile[level][endpoint[i] + 22 * i] === 3)) { _wall[1] = true; } //
        if (tile[level][endpoint[i] + ii] === 0 && player[1] === 0 && !_wall[2]) { _que.push(i); return; }
        else if (!_wall[2] && (tile[level][endpoint[i] + ii] === 2 || tile[level][endpoint[i] + ii] === 3)) { _wall[2] = true; } //
        if (tile[level][endpoint[i] - ii] === 0 && player[1] === 0 && !_wall[3]) { _que.push(i); return }
        else if (!_wall[3] && (tile[level][endpoint[i] - ii] === 2 || tile[level][endpoint[i] - ii] === 3)) { _wall[3] = true; } //
      }
    }
    // LONG RANGE DISTANCE SOLVER
    var _tap = [].concat(endpoint);
    for (i = 0; i < _tap.length; i++) { if (_tap[i] === player[0][level]) { _tap[i] = 800 } }
    //console.log("near x,y: "+nearest[1]%22*20+" : "+floor(nearest[1]/22)*20+" player x,y: "+player[0][level]%22*20+" : "+floor(player[0][level]/22)*20);
    switch (_tap.indexOf(min(_tap))) {
      case 0: pcm("up", -22, true); return;
      case 1: pcm("down", 22, true); return;
      case 2: pcm("right", 1, true); return;
      case 3: pcm("left", -1, true); return;
    }
  }
}
//slider(200,200,100,100,0,10,20,255,0);
function slider(x, y, w, h, val, cov, radii, fg, dl) {
  this.x = x;
  this.y = y;
  this.width = w + radii / 2;
  this.height = h;
  //this.radii = radii;
  this.MAX = w / cov;
  this.val = x + val * this.MAX;
  this.total = floor(abs(this.val - x) / this.MAX);
  this.modify = false;
  this.display = function () {
    if (mouseX > x && mouseX < x + w + radii && mouseY > y && mouseY < y + h && mouseWentDown("leftButton")) { this.modify = true }
    else if (mouseWentUp("leftButton")) {
      this.modify = false;
    }
    if (this.modify) { this.val = mouseX }
    this.val = constrain(this.val, x, x + w);
    fill(fg); stroke(0); rect(x, y, w + radii, h);
    fill(dl); stroke(0); ellipse(this.val + radii / 2, y + h / 2, radii, radii);
    this.total = floor(abs(this.val - x) / this.MAX);
  };
}
function distance(ti, it) {
  it = arguments[1] || player[0][level];
  return (sqrt(pow((it % 22 - 1) * 20 - (ti % 22 - 1) * 20, 2)) + sqrt(pow(floor(it / 22) * 20 - floor(ti / 22) * 20, 2)));
}
function sound(snd, rep) {
  if (arguments.length < 1 || opt[0][2] !== "ON") { return }
  else { rep = arguments[1] || false; return (playSound(snd, rep)); }
}
function isMobile() { 
  gen.background(rgb(0, 0, 0));
  gen.rect(0, 0, 5, 5);
  image(gen, 0, 0);
  var cache = get(6, 6)[0];
  background(rgb(255, 255, 255));
  return (cache);
}
// -----
    try { window.draw = draw; } catch (e) {}
    switch (stage) {
      case 'preload':
        if (preload !== window.preload) { preload(); }
        break;
      case 'setup':
        if (setup !== window.setup) { setup(); }
        break;
    }
  }
  window.wrappedExportedCode = wrappedExportedCode;
  wrappedExportedCode('preload');
};

window.setup = function () {
  window.wrappedExportedCode('setup');
};
